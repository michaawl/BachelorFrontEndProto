// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "blog.proto" (package "blog", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Blog Author
 *
 * @generated from protobuf message blog.Author
 */
export interface Author {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: string email = 2
     */
    email: string;
}
/**
 * Blog Section
 *
 * @generated from protobuf message blog.BlogSection
 */
export interface BlogSection {
    /**
     * @generated from protobuf field: string heading = 1
     */
    heading: string;
    /**
     * @generated from protobuf field: string body = 2
     */
    body: string;
}
/**
 * Media block with optional URLs
 *
 * @generated from protobuf message blog.MediaBlock
 */
export interface MediaBlock {
    /**
     * @generated from protobuf field: string imageUrl = 1
     */
    imageUrl: string;
    /**
     * @generated from protobuf field: string audioUrl = 2
     */
    audioUrl: string;
    /**
     * @generated from protobuf field: string videoUrl = 3
     */
    videoUrl: string;
}
/**
 * Metadata
 *
 * @generated from protobuf message blog.Metadata
 */
export interface Metadata {
    /**
     * @generated from protobuf field: repeated string tags = 1
     */
    tags: string[];
    /**
     * @generated from protobuf field: int32 wordCount = 2
     */
    wordCount: number;
}
/**
 * A single blog post
 *
 * @generated from protobuf message blog.BlogPost
 */
export interface BlogPost {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string title = 2
     */
    title: string;
    /**
     * @generated from protobuf field: blog.Author author = 3
     */
    author?: Author;
    /**
     * @generated from protobuf field: repeated blog.BlogSection sections = 4
     */
    sections: BlogSection[];
    /**
     * @generated from protobuf field: blog.MediaBlock media = 5
     */
    media?: MediaBlock;
    /**
     * @generated from protobuf field: blog.Metadata metadata = 6
     */
    metadata?: Metadata;
    /**
     * @generated from protobuf field: string publishedAt = 7
     */
    publishedAt: string; // Use ISO8601 string (or google.protobuf.Timestamp if you want)
}
/**
 * Returns all blog posts
 *
 * @generated from protobuf message blog.BlogPostsResponse
 */
export interface BlogPostsResponse {
    /**
     * @generated from protobuf field: repeated blog.BlogPost posts = 1
     */
    posts: BlogPost[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Author$Type extends MessageType<Author> {
    constructor() {
        super("blog.Author", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Author>): Author {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.email = "";
        if (value !== undefined)
            reflectionMergePartial<Author>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Author): Author {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Author, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blog.Author
 */
export const Author = new Author$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlogSection$Type extends MessageType<BlogSection> {
    constructor() {
        super("blog.BlogSection", [
            { no: 1, name: "heading", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BlogSection>): BlogSection {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.heading = "";
        message.body = "";
        if (value !== undefined)
            reflectionMergePartial<BlogSection>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlogSection): BlogSection {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string heading */ 1:
                    message.heading = reader.string();
                    break;
                case /* string body */ 2:
                    message.body = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlogSection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string heading = 1; */
        if (message.heading !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.heading);
        /* string body = 2; */
        if (message.body !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blog.BlogSection
 */
export const BlogSection = new BlogSection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MediaBlock$Type extends MessageType<MediaBlock> {
    constructor() {
        super("blog.MediaBlock", [
            { no: 1, name: "imageUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "audioUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "videoUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MediaBlock>): MediaBlock {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.imageUrl = "";
        message.audioUrl = "";
        message.videoUrl = "";
        if (value !== undefined)
            reflectionMergePartial<MediaBlock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MediaBlock): MediaBlock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string imageUrl */ 1:
                    message.imageUrl = reader.string();
                    break;
                case /* string audioUrl */ 2:
                    message.audioUrl = reader.string();
                    break;
                case /* string videoUrl */ 3:
                    message.videoUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MediaBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string imageUrl = 1; */
        if (message.imageUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.imageUrl);
        /* string audioUrl = 2; */
        if (message.audioUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.audioUrl);
        /* string videoUrl = 3; */
        if (message.videoUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.videoUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blog.MediaBlock
 */
export const MediaBlock = new MediaBlock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Metadata$Type extends MessageType<Metadata> {
    constructor() {
        super("blog.Metadata", [
            { no: 1, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "wordCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Metadata>): Metadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tags = [];
        message.wordCount = 0;
        if (value !== undefined)
            reflectionMergePartial<Metadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Metadata): Metadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string tags */ 1:
                    message.tags.push(reader.string());
                    break;
                case /* int32 wordCount */ 2:
                    message.wordCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Metadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string tags = 1; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.tags[i]);
        /* int32 wordCount = 2; */
        if (message.wordCount !== 0)
            writer.tag(2, WireType.Varint).int32(message.wordCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blog.Metadata
 */
export const Metadata = new Metadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlogPost$Type extends MessageType<BlogPost> {
    constructor() {
        super("blog.BlogPost", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "author", kind: "message", T: () => Author },
            { no: 4, name: "sections", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BlogSection },
            { no: 5, name: "media", kind: "message", T: () => MediaBlock },
            { no: 6, name: "metadata", kind: "message", T: () => Metadata },
            { no: 7, name: "publishedAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BlogPost>): BlogPost {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.title = "";
        message.sections = [];
        message.publishedAt = "";
        if (value !== undefined)
            reflectionMergePartial<BlogPost>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlogPost): BlogPost {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* blog.Author author */ 3:
                    message.author = Author.internalBinaryRead(reader, reader.uint32(), options, message.author);
                    break;
                case /* repeated blog.BlogSection sections */ 4:
                    message.sections.push(BlogSection.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* blog.MediaBlock media */ 5:
                    message.media = MediaBlock.internalBinaryRead(reader, reader.uint32(), options, message.media);
                    break;
                case /* blog.Metadata metadata */ 6:
                    message.metadata = Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* string publishedAt */ 7:
                    message.publishedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlogPost, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* blog.Author author = 3; */
        if (message.author)
            Author.internalBinaryWrite(message.author, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated blog.BlogSection sections = 4; */
        for (let i = 0; i < message.sections.length; i++)
            BlogSection.internalBinaryWrite(message.sections[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* blog.MediaBlock media = 5; */
        if (message.media)
            MediaBlock.internalBinaryWrite(message.media, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* blog.Metadata metadata = 6; */
        if (message.metadata)
            Metadata.internalBinaryWrite(message.metadata, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string publishedAt = 7; */
        if (message.publishedAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.publishedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blog.BlogPost
 */
export const BlogPost = new BlogPost$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlogPostsResponse$Type extends MessageType<BlogPostsResponse> {
    constructor() {
        super("blog.BlogPostsResponse", [
            { no: 1, name: "posts", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BlogPost }
        ]);
    }
    create(value?: PartialMessage<BlogPostsResponse>): BlogPostsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.posts = [];
        if (value !== undefined)
            reflectionMergePartial<BlogPostsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlogPostsResponse): BlogPostsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated blog.BlogPost posts */ 1:
                    message.posts.push(BlogPost.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlogPostsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated blog.BlogPost posts = 1; */
        for (let i = 0; i < message.posts.length; i++)
            BlogPost.internalBinaryWrite(message.posts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blog.BlogPostsResponse
 */
export const BlogPostsResponse = new BlogPostsResponse$Type();
/**
 * @generated ServiceType for protobuf service blog.Blog
 */
export const Blog = new ServiceType("blog.Blog", [
    { name: "GetAll", options: {}, I: Empty, O: BlogPostsResponse }
]);
